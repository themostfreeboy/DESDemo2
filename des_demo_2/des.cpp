#include "des.h"

/*-------------------------------
 把DatIn开始的长度位Len位的二进制
 复制到DatOut后
--------------------------------*/
void BitsCopy(bool *DatOut,bool *DatIn,int Len)//数组复制 OK 
{
	int i=0;
	for(i=0;i<Len;i++)
	{
		DatOut[i]=DatIn[i];
	}
}

/*-------------------------------
 字节转换成位函数 
 每8次换一个字节 每次向右移一位
 和1与取最后一位 共64位 
--------------------------------*/
void ByteToBit(bool *DatOut,const char *DatIn,int Num)//OK
{
	int i=0;
	for(i=0;i<Num;i++)
	{
		DatOut[i]=(DatIn[i/8]>>(i%8))&0x01;   
	}                                       
}

/*-------------------------------
 位转换成字节函数
 字节数组每8次移一位
 位每次向左移 与上一次或   
---------------------------------*/
void BitToByte(char *DatOut,const bool *DatIn,int Num)//OK
{
	int i=0;
	for(i=0;i<(Num/8);i++)
	{
		DatOut[i]=0;
	} 
	for(i=0;i<Num;i++)
	{
		DatOut[i/8]|=DatIn[i]<<(i%8);	
	}		
}


/*----------------------------------
 二进制密文转换为十六进制
 需要8个字符表示
-----------------------------------*/
void BitToHex(char *DatOut,const bool *DatIn,int Num)
{
	int i=0;
	for(i=0;i<Num/8;i++)
	{
		DatOut[i]=0;
	}
	for(i=0;i<Num/8;i++)
	{
		DatOut[i] = DatIn[i*8]+(DatIn[i*8+1]<<1)+(DatIn[i*8+2]<<2)+(DatIn[i*8+3]<<3)+(DatIn[i*8+4]<<4)+(DatIn[i*8+5]<<5)+(DatIn[i*8+6]<<6)+(DatIn[i*8+7]<<7);
	}
}

/*---------------------------------------------
 十六进制字符转二进制
----------------------------------------------*/
void HexToBit(bool *DatOut,const char *DatIn,int Num)
{
	int i=0; 
	for(i=0;i<Num;i++)
	{
		DatOut[i]=((DatIn[i/8])>>(i%8))&0x01;   			
	}	
}

//表置换函数  OK
void TablePermute(bool *DatOut,const bool *DatIn,const char *Table,int Num)  
{
	int i=0;
	static bool Temp[256]={0};
	for(i=0;i<Num;i++)//Num为置换的长度 
	{
		Temp[i]=DatIn[Table[i]-1];//原来的数据按对应的表上的位置排列 
	}
	BitsCopy(DatOut,Temp,Num);//把缓存Temp的值输出 
} 

//子密钥的移位
void LoopMove(bool *DatIn,int Len,int Num)//循环左移 Len数据长度 Num移动位数
{
	static bool Temp[256]={0};//缓存   OK
	BitsCopy(Temp,DatIn,Num);//将数据最左边的Num位(被移出去的)存入Temp 
	BitsCopy(DatIn,DatIn+Num,Len-Num);//将数据左边开始的第Num移入原来的空间
	BitsCopy(DatIn+Len-Num,Temp,Num); //将缓存中移出去的数据加到最右边 
} 

//按位异或
void Xor(bool *DatA,const bool *DatB,int Num)//异或函数
{
	int i=0;
	for(i=0;i<Num;i++)
	{
		DatA[i]=DatA[i]^DatB[i];//异或 
	}
} 

//输入48位 输出32位 与Ri异或
void S_Change(bool DatOut[32],const bool DatIn[48])//S盒变换
{
	int i,X,Y;//i为8个S盒 
	for(i=0,Y=0,X=0;i<8;i++,DatIn+=6,DatOut+=4)//每执行一次,输入数据偏移6位 
	{    									   //每执行一次,输出数据偏移4位
		Y=(DatIn[0]<<1)+DatIn[5];//af代表第几行
		X=(DatIn[1]<<3)+(DatIn[2]<<2)+(DatIn[3]<<1)+DatIn[4];//bcde代表第几列
		ByteToBit(DatOut,&S_Box[i][Y][X],4);//把找到的点数据换为二进制	
	}
}

//F函数
void F_Change(bool DatIn[32],bool DatKi[48])//F函数
{
	static bool MiR[48]={0};//输入32位通过E选位变为48位
	TablePermute(MiR,DatIn,E_Table,48); 
	Xor(MiR,DatKi,48);//和子密钥异或
	S_Change(DatIn,MiR);//S盒变换
	TablePermute(DatIn,DatIn,P_Table,32);//P置换后输出
}

void SetKey(char KeyIn[8])//设置密钥 获取子密钥Ki 
{
	int i=0;
	bool KeyBit[64]={0};//密钥二进制存储空间 
	bool *KiL=&KeyBit[0],*KiR=&KeyBit[28];//前28,后28共56
	ByteToBit(KeyBit,KeyIn,64);//把密钥转为二进制存入KeyBit 
	TablePermute(KeyBit,KeyBit,PC1_Table,56);//PC1表置换 56次
	for(i=0;i<16;i++)
	{
		LoopMove(KiL,28,Move_Table[i]);//前28位左移 
		LoopMove(KiR,28,Move_Table[i]);//后28位左移 
	 	TablePermute(SubKey[i],KeyBit,PC2_Table,48); 
	 	//二维数组 SubKey[i]为每一行起始地址 
	 	//每移一次位进行PC2置换得 Ki 48位 
	}		
}

void PlayDes(char MesOut[8],const char MesIn[8])//执行DES加密
{                                           //字节输入 Bin运算 Hex输出 
	int i=0;
	static bool MesBit[64]={0};//明文二进制存储空间 64位
	static bool Temp[32]={0};
	static bool *MiL=&MesBit[0],*MiR=&MesBit[32];//前32位 后32位 
	ByteToBit(MesBit,MesIn,64);//把明文换成二进制存入MesBit
	TablePermute(MesBit,MesBit,IP_Table,64);//IP置换 
	for(i=0;i<16;i++)//迭代16次 
	{
		BitsCopy(Temp,MiR,32);//临时存储
		F_Change(MiR,SubKey[i]);//F函数变换
		Xor(MiR,MiL,32);//得到Ri 
		BitsCopy(MiL,Temp,32);//得到Li 
	}					
	TablePermute(MesBit,MesBit,IPR_Table,64);
	BitToHex(MesOut,MesBit,64);
}

void KickDes(char MesOut[8],const char MesIn[8])//执行DES解密
{												//Hex输入 Bin运算 字节输出 
	int i=0;
	bool MesBit[64]={0};//密文二进制存储空间 64位
	bool Temp[32]={0};
	bool *MiL=&MesBit[0],*MiR=&MesBit[32];//前32位 后32位
	HexToBit(MesBit,MesIn,64);//把密文换成二进制存入MesBit
	TablePermute(MesBit,MesBit,IP_Table,64);//IP置换 
	for(i=15;i>=0;i--)
	{
		BitsCopy(Temp,MiL,32);
		F_Change(MiL,SubKey[i]);
		Xor(MiL,MiR,32);
		BitsCopy(MiR,Temp,32);
	}	
	TablePermute(MesBit,MesBit,IPR_Table,64);
	BitToByte(MesOut,MesBit,64);		
}

void des_code(const char origin_message[8], const char key[8], char coded_message[8])//des算法加密
{
	char set_key[8];
	for(int i=0;i<8;i++)
	{
		set_key[i]=key[i];
	}
	SetKey(set_key);//设置密钥 得到子密钥Ki
	PlayDes(coded_message,origin_message);//执行DES加密
}

void des_decode(const char origin_message[8], const char key[8], char decoded_message[8])//des算法解密
{
	char set_key[8];
	for(int i=0;i<8;i++)
	{
		set_key[i]=key[i];
	}
	SetKey(set_key);//设置密钥
	KickDes(decoded_message,origin_message);//解密输出到MyMessage
}

void des_print(const unsigned char message[8])//以16进制形式显示加密后或解密后的信息
{
	printf("des:");
	for (int i = 0; i < 8; i++)
	{
		printf("%02x", message[i]);
	}
	printf("\n");
}